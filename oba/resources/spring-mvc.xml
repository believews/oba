<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 支持定时器标注 的开关 在任意的 @Service @Controller 类里的无参数方法里表明@Scheduled(fixedRate=5000)-->
	<context:component-scan base-package="com.oba" />
	<task:annotation-driven />
	<mvc:annotation-driven /><!-- 自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean, -->
	<mvc:default-servlet-handler/><!-- 加上这个默认的servlet时候，servlet在找不到的时候会去找静态的内容 -->
	<!-- DefaultAnnotationHandlerMapping 是 HandlerMapping 接口的一个最常用的实现类。用于映射Handler 
	和请求路径之间的关系。 通过这样的配置，Controller 中的 @RequestMapping中的路径值就可以真正地和Http请求对应起来。
-->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<bean class="com.oba.web.comm.interceptor.LogInterceptor" />
				<bean class="com.oba.web.comm.interceptor.LoginValidateInterceptor">
					<property name="uncheckedUrls">
						<list>
							<!-- 404 -->
							<!-- 登陆 -->
							<!-- 验证码 -->
						</list>
					</property>
				</bean>
				<!--  配置权限检查的拦截器  -->
				<!-- <bean class="cc.cf.agent.web.comm.interceptor.PermissionInterceptor" />-->
				<!--   配置多语言改变的拦截器 -->
				<ref bean="localeChangeInterceptor" />
			</list>
		</property>
	</bean>
	<!-- AnnotationMethodHandlerAdapter 的作用是使处理请求的 Handler能够真正的具有处理请求的能力而提供
	一些服务， 包括为请求参数绑定应用相应的属性编辑器（通过注册 webBindingInitializer实现）-->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- 配置Controller中返回文本（譬如返回的是XML文档）的编码（防止中文乱码），类似于下面的语句：
					response.setCharacterEncoding("UTF-8");response.setContentType("UTF-8");
-->
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
							<value>text/xml;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
		<property name="customArgumentResolver">
			<ref bean="userArgumentResolver" />
		</property>
	</bean>


	<bean id="userArgumentResolver" class="com.oba.web.comm.interceptor.UserArgumentResolver" />
	<!--
		spring具有将数据转化后再交给controller的功能，spring 3 新增了对json的处理能力， 是基于Jackson JSON
		Processor（http://jackson.codehaus.org/）的，
		使用时要配置一下在上面的AnnotationMethodHandlerAdapter配置中引用这个bean
	-->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/page/oba/" p:suffix=".jsp" />
	<!-- 国际化资源文件绑定器 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 可以指定多个属性文件，譬如message1，message2，message3，只需要在<list></list>中间增加一行<value></value>即可
-->
		<property name="basenames">
			<list>
				<!--<value></value>中间的值是message文件的路径，因为这里的bean使用的是ReloadableResourceBundleMessageSource，
					如果message文件放在src下面的话，需要加上classpath前缀。
-->
				<value>classpath:i18n/comm</value>
			</list>
		</property>
		<!-- 默认为false，这样当Spring在ResourceBundle中找不到messageKey的话，就抛出NoSuchMessageException，
			把它设置为True，则找不到不会抛出异常，而是使用messageKey作为返回值。
-->
		<property name="useCodeAsDefaultMessage" value="true" />
		<!-- 设置编码类型，注意：message相关的properties文件在创建的时候，需要时utf-8类型，而且网站编码也是utf-8类型，否则可能中文乱码
-->
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!--对静态资源文件的访问-->
	<mvc:resources mapping="/page/**" location="/page/" />
	<mvc:resources mapping="/upload/**" location="/upload/" />
	<!-- 可以使用LocaleChangeInterceptor修改本地化信息。 这个拦截器需要被添加到处理器映射中。
		它可以侦测请求中某个特定的参数siteLang，然后调用上下文中的LocaleResolver中的setLocale()方法，相应地修改本地化信息。-->
	<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="siteLang" />
	</bean>

	<!-- SessionLocaleResolver允许从用户请求相关的session中获取本地化信息。 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- 统一设置异常页面 , Controller代码检查参数 尽管抛出  GenericBusinessException 即可-->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="common.cf.exception.GenericBusinessException">zcomm/global_error</prop>
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">zcomm/sys_error</prop>
				<prop key="java.lang.Exception">zcomm/global_error</prop>
				<prop key="java.lang.Throwable">zcomm/global_error</prop>
			</props>
		</property>
		<!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
		<property name="defaultErrorView" value="zcomm/sys_error" />
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
		<property name="warnLogCategory" value="WARN" />
	</bean>

	<!-- 文件上传-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<!-- 最大限制1024*1024*100=10M 同时修改zcomm/sys_error-->
		<property name="maxUploadSize" value="104857600"/>
	</bean>
</beans>