<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
		
		<util:properties id="applicationsConfiguration" location="classpath:datasource.properties" />
		
		<bean id="paginationInterceptor" class="com.oba.mybatis.interceptor.PaginationInterceptor"></bean>
	 	<!-- MyBatis配置 -->
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSourceCommunication" />
	        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
	        <property name="typeAliasesPackage" value="com.oba.entity" />
	        <!-- 显式指定Mapper文件位置 -->
	        <property name="mapperLocations" value="classpath:com/oba/mybatis/mapper/*Mapper.xml" />
	        <property name="plugins">
	            <array>
	                <ref bean="paginationInterceptor"/>
	            </array>
	        </property>
	        <property name="configurationProperties">
	            <props>
	                <prop key="dialect">mysql</prop>
	            </props>
	        </property>
	    </bean>
    
     <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.oba.*" />
        <property name="annotationClass" value="com.oba.mybatis.MyBatisRepository"/>
    </bean>
    
	<!-- 加载系统自定义配置 -->
	<bean id="customizedConfigurer" class="com.oba.web.comm.syscontains.CustomizedConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 加载上传自定义配置 -->
	<bean id="uploadUrlsConfigurer" class="com.oba.web.comm.syscontains.UploadUrlsConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/uploadurls.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- dataSource配置 -->
	<bean id="dataSourceCommunication" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="#{applicationsConfiguration['jdbc.url']}" />
		<property name="username"
			value="#{applicationsConfiguration['jdbc.username']}" />
		<property name="password"
			value="#{applicationsConfiguration['jdbc.password']}" />
		<property name="driverClassName"
			value="#{applicationsConfiguration['jdbc.driverClassName']}" />
		<!-- 添加监控用途的statFilter -->
		<!--
			<property name="filters"
			value="#{applicationsConfiguration['jdbc.filters']}" />
		-->

		<property name="maxActive"
			value="#{applicationsConfiguration['jdbc.maxActive']}" />
		<property name="initialSize"
			value="#{applicationsConfiguration['jdbc.initialSize']}" />
		<property name="maxWait" value="#{applicationsConfiguration['jdbc.maxWait']}" />
		<property name="minIdle" value="#{applicationsConfiguration['jdbc.minIdle']}" />

		<!-- 连接Idle一个小时后超时 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="#{applicationsConfiguration['jdbc.timeBetweenEvictionRunsMillis']}" />
		<property name="minEvictableIdleTimeMillis"
			value="#{applicationsConfiguration['jdbc.minEvictableIdleTimeMillis']}" />

		<property name="validationQuery"
			value="#{applicationsConfiguration['jdbc.validationQuery']}" />
		<property name="testWhileIdle"
			value="#{applicationsConfiguration['jdbc.testWhileIdle']}" />
		<property name="testOnBorrow"
			value="#{applicationsConfiguration['jdbc.testOnBorrow']}" />
		<property name="testOnReturn"
			value="#{applicationsConfiguration['jdbc.testOnReturn']}" />
		<!--  
		<property name="poolPreparedStatements"
			value="#{applicationsConfiguration['jdbc.poolPreparedStatements']}" />
			
		<property name="maxOpenPreparedStatements"
			value="#{applicationsConfiguration['jdbc.maxOpenPreparedStatements']}" />-->
		<property name="removeAbandoned"
			value="#{applicationsConfiguration['jdbc.removeAbandoned']}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout"
			value="#{applicationsConfiguration['jdbc.removeAbandonedTimeout']}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned"
			value="#{applicationsConfiguration['jdbc.logAbandoned']}" /> <!-- 关闭abanded连接时输出错误日志 -->
			<property name="filters" value="stat" /><!-- sql监控拦截器 -->
	</bean>
	 <!-- 定义mybatis操作模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!--  
    <bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>log4jdbcInterceptor</value>
            </list>
        </property>
        <property name="beanNames">
            <list>
                <value>dataSource</value>
            </list>
        </property>
    </bean>
    -->
	  <!-- Transaction manager for a single JDBC DataSource -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceCommunication"/>
    </bean>

    <!-- Enable @Transactional support -->
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
    <!-- Enable @AspectJ support -->
    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>
</beans>